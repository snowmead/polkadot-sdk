name: Fork Upgrade Analyzer

on:
  workflow_dispatch:
    inputs:
      release_url:
        description: 'Upstream release URL (e.g., https://github.com/paritytech/polkadot-sdk/releases/tag/polkadot-stable2503-2)'
        required: true
        type: string
      branch_name:
        description: 'Branch name (e.g., fork-upgrade/v1.2.3)'
        required: true
        type: string
      target_branch:
        description: 'Target branch for the PR'
        required: false
        default: 'main'
        type: string
      pr_draft:
        description: 'Create PR as draft'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  analyze-and-create-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Extract release information
        id: release_info
        run: |
          # Extract version and repo info from URL
          if [[ ! "${{ inputs.release_url }}" =~ ^https://github.com/[^/]+/[^/]+/releases/tag/.+ ]]; then
            echo "Error: Invalid release URL format"
            exit 1
          fi
          
          VERSION=$(echo "${{ inputs.release_url }}" | sed -n 's/.*\/tag\/\(.*\)$/\1/p')
          REPO_PATH=$(echo "${{ inputs.release_url }}" | sed -n 's|https://github.com/\([^/]*/[^/]*\)/.*|\1|p')
          REPO_NAME=$(echo "${REPO_PATH##*/}")
          ANALYSIS_DIR="fork-upgrade-analysis/${REPO_NAME}-${VERSION}"
          BRANCH_NAME="${{ inputs.branch_name }}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "repo_path=${REPO_PATH}" >> $GITHUB_OUTPUT
          echo "analysis_dir=${ANALYSIS_DIR}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          # Log for debugging
          echo "üìã Release Information:"
          echo "  Version: ${VERSION}"
          echo "  Repository: ${REPO_PATH}"
          echo "  Analysis Directory: ${ANALYSIS_DIR}"
          echo "  Branch Name: ${BRANCH_NAME}"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Create branch and initial PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if branch already exists
          if git ls-remote --heads origin "${{ steps.release_info.outputs.branch_name }}" | grep -q "${{ steps.release_info.outputs.branch_name }}"; then
            echo "‚ö†Ô∏è Branch already exists, checking out existing branch"
            git fetch origin "${{ steps.release_info.outputs.branch_name }}"
            git checkout "${{ steps.release_info.outputs.branch_name }}"
            BRANCH_EXISTS="true"
          else
            echo "üìù Creating new branch"
            git checkout -b "${{ steps.release_info.outputs.branch_name }}"
            BRANCH_EXISTS="false"
            
            # Create initial placeholder file
            mkdir -p "${{ steps.release_info.outputs.analysis_dir }}"
            echo "# Fork Upgrade Analysis in Progress..." > "${{ steps.release_info.outputs.analysis_dir }}/README.md"
            echo "" >> "${{ steps.release_info.outputs.analysis_dir }}/README.md"
            echo "Analysis for: ${{ inputs.release_url }}" >> "${{ steps.release_info.outputs.analysis_dir }}/README.md"
            echo "Started at: $(date)" >> "${{ steps.release_info.outputs.analysis_dir }}/README.md"
            
            git add "${{ steps.release_info.outputs.analysis_dir }}"
            git commit -m "Initial commit for fork upgrade analysis
            
            Branch: ${{ steps.release_info.outputs.branch_name }}
            Release: ${{ inputs.release_url }}"
            
            git push -u origin "${{ steps.release_info.outputs.branch_name }}"
          fi
          
          echo "branch_exists=${BRANCH_EXISTS}" >> $GITHUB_OUTPUT
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base "${{ inputs.target_branch }}" --head "${{ steps.release_info.outputs.branch_name }}" --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "üìù PR already exists: #${EXISTING_PR}"
            echo "pr_number=${EXISTING_PR}" >> $GITHUB_OUTPUT
            echo "PR_URL=https://github.com/${{ github.repository }}/pull/${EXISTING_PR}" >> $GITHUB_ENV
          else
            echo "üÜï Creating new PR"
            PR_TITLE="${{ steps.release_info.outputs.branch_name }}"
            
            DRAFT_FLAG=""
            if [ "${{ inputs.pr_draft }}" = "true" ]; then
              DRAFT_FLAG="--draft"
            fi
            
            # Create PR body in a file to avoid YAML parsing issues
            cat > pr-body.txt << 'PREOF'
          # Fork Upgrade Analysis
          
          üîÑ Status: Analysis in progress...
          
          Release URL: RELEASE_URL_PLACEHOLDER
          Branch: BRANCH_NAME_PLACEHOLDER
          Started: START_TIME_PLACEHOLDER
          
          ---
          
          This PR will be updated automatically once the analysis is complete.
          PREOF
            
            # Replace placeholders
            sed -i.bak "s|RELEASE_URL_PLACEHOLDER|${{ inputs.release_url }}|g" pr-body.txt
            sed -i.bak "s|BRANCH_NAME_PLACEHOLDER|${{ steps.release_info.outputs.branch_name }}|g" pr-body.txt
            sed -i.bak "s|START_TIME_PLACEHOLDER|$(date)|g" pr-body.txt
            rm -f pr-body.txt.bak
            
            PR_URL=$(gh pr create \
              --title "${PR_TITLE}" \
              --body-file pr-body.txt \
              --base "${{ inputs.target_branch }}" \
              --head "${{ steps.release_info.outputs.branch_name }}" \
              --label "fork-upgrade" \
              ${DRAFT_FLAG})
              
            PR_NUMBER=$(echo "${PR_URL}" | sed 's/.*\/\([0-9]*\)$/\1/')
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "PR_URL=${PR_URL}" >> $GITHUB_ENV
            
            rm -f pr-body.txt
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      - name: Run Fork Upgrade Analyzer
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Starting fork upgrade analysis..."
          echo "üìç Working on PR #${{ steps.create_pr.outputs.pr_number }}"
          
          # Update PR to show analysis is running
          gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "ü§ñ Fork upgrade analysis started at $(date)"
          
          # Create the analyzer prompt file
          cat > analyzer-prompt.txt << 'ANALYZEREOF'
          # Fork Upgrade Analyzer

          Analyze upstream release changes and generate upgrade guide for fork maintainers.

          Release URL: RELEASE_URL_PLACEHOLDER
          Analysis Directory: ANALYSIS_DIR_PLACEHOLDER

          ## Process

          ### Phase 1: Analyze Upstream Repository
          1. Parse release URL to extract repository and version
          2. Fetch release notes, changelog, and included PRs/issues
          3. Use TodoWrite to track each item found

          ### Phase 2: Parallel Change Unit Analysis
          1. Group related PRs and issues into logical change units:
             - Issue with its fixing PRs = one unit
             - Standalone PR = one unit
             - Related PRs = one unit
          
          2. **Critical**: Spawn all sub-agents in parallel in one message for each change unit.

          3. Each sub-agent analyzes one change unit and creates:
             ```
             ANALYSIS_DIR_PLACEHOLDER/
             ‚îú‚îÄ‚îÄ change-unit-<identifier>/
             ‚îÇ   ‚îî‚îÄ‚îÄ analysis.md
             ‚îî‚îÄ‚îÄ fork-upgrade-guide.md
             ```

          4. Sub-agent template for each change unit:
             - Fetch all URLs in the unit
             - Analyze how items work together
             - Create analysis.md with:
               - Overview (Type, Component, Severity, Links)
               - Summary (2-3 sentences)
               - Technical details with code examples
               - Impact analysis (breaking changes, migration steps)
               - Risks, benefits, and recommendations

          ### Phase 3: Generate Fork Upgrade Guide
          1. Read all analysis.md files
          2. **Critical**: Create `fork-upgrade-guide.md` in ANALYSIS_DIR_PLACEHOLDER
          3. Include:
             - Overview table with metrics
             - Release summary
             - Implementation checklist with flags:
               - üî¥ BREAKING for breaking changes
               - üõ°Ô∏è SECURITY for security fixes
               - ‚ö†Ô∏è EXPERIMENTAL for experimental features
             - Quick links section

          ## Requirements
          - Must create exact directory structure
          - Must create fork-upgrade-guide.md
          - All agents run in parallel
          - Use proper markdown with hyperlinks

          Begin analysis now.
          ANALYZEREOF
          
          # Replace placeholders with actual values
          sed -i.bak "s|RELEASE_URL_PLACEHOLDER|${{ inputs.release_url }}|g" analyzer-prompt.txt
          sed -i.bak "s|ANALYSIS_DIR_PLACEHOLDER|${{ steps.release_info.outputs.analysis_dir }}|g" analyzer-prompt.txt
          rm -f analyzer-prompt.txt.bak
          
          # Run the analyzer with timeout and error handling - use -p flag for non-interactive mode
          PROMPT_CONTENT=$(cat analyzer-prompt.txt)
          timeout 30m claude -p "${PROMPT_CONTENT}" --allowedTools "Edit,Glob,Grep,LS,Read,Write,mcp__github_file_ops__commit_files,WebSearch,WebFetch" || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "‚ùå Analysis timed out after 30 minutes"
              gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "‚ùå Analysis timed out after 30 minutes"
              exit 1
            else
              echo "‚ùå Analysis failed with exit code: $EXIT_CODE"
              gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "‚ùå Analysis failed with exit code: $EXIT_CODE"
              exit $EXIT_CODE
            fi
          }
          
          # Verify the analysis was created
          if [ ! -d "${{ steps.release_info.outputs.analysis_dir }}" ]; then
            echo "‚ùå Analysis directory was not created"
            gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "‚ùå Analysis directory was not created"
            exit 1
          fi
          
          if [ ! -f "${{ steps.release_info.outputs.analysis_dir }}/fork-upgrade-guide.md" ]; then
            echo "‚ùå Fork upgrade guide was not generated"
            gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "‚ùå Fork upgrade guide was not generated"
            exit 1
          fi
          
          echo "‚úÖ Analysis completed successfully"
          gh pr comment ${{ steps.create_pr.outputs.pr_number }} --body "‚úÖ Analysis completed successfully at $(date)"
          
          # Clean up
          rm -f analyzer-prompt.txt

      - name: Update PR with analysis results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Commit and push the analysis results
          git add "${{ steps.release_info.outputs.analysis_dir }}"
          git commit -m "Add fork upgrade analysis for ${{ steps.release_info.outputs.version }}
          
          Automated analysis of upstream release:
          ${{ inputs.release_url }}
          
          Generated by Fork Upgrade Analyzer workflow"
          
          git push
          
          # Update PR with analysis results
          PR_TITLE="üöÄ Fork Upgrade to ${{ steps.release_info.outputs.version }}"
          PR_BODY_FILE="${{ steps.release_info.outputs.analysis_dir }}/fork-upgrade-guide.md"
          
          echo "üìù Updating PR #${{ steps.create_pr.outputs.pr_number }} with analysis results"
          gh pr edit ${{ steps.create_pr.outputs.pr_number }} \
            --title "${PR_TITLE}" \
            --body-file "${PR_BODY_FILE}"
          

      - name: Generate summary
        if: always()
        run: |
          echo "# Fork Upgrade Analysis Summary üìä" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ **Status**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Details" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release URL** | ${{ inputs.release_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.release_info.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | ${{ steps.release_info.outputs.repo_path }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | ${{ inputs.target_branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Analysis Directory** | \`${{ steps.release_info.outputs.analysis_dir }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch Name** | \`${{ steps.release_info.outputs.branch_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Pull Request** | [PR #${{ steps.create_pr.outputs.pr_number }}](${PR_URL}) |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add analysis files if they exist
          if [ -d "${{ steps.release_info.outputs.analysis_dir }}" ]; then
            echo "## Generated Files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            find "${{ steps.release_info.outputs.analysis_dir }}" -type f -name "*.md" | sort
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post failure comment
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Only post if this was triggered from an issue
          if [ -n "${{ github.event.issue.number }}" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå Fork upgrade analysis failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
          fi
