name: Cherry Pick Analyzer

on:
  workflow_dispatch:
    inputs:
      csv_data:
        description: "CSV formatted cherry pick data"
        required: true
        type: string
      release_version:
        description: "Release version (e.g., polkadot-stable2412)"
        required: true
        type: string
      issue_title:
        description: "Title for the GitHub issue"
        required: false
        default: "Cherry Pick Management"
        type: string
  issue_comment:
    types: [created]
  issues:
    types: [opened]

jobs:
  cherry-pick-analyzer:
    # Run if manually dispatched by @snowmead OR comment contains @cherry-pick-analyzer from @snowmead
    if: |
      (github.event_name == 'workflow_dispatch' && github.actor == 'snowmead') ||
      (github.event.comment.body && contains(github.event.comment.body, '@cherry-pick-analyzer') && github.event.comment.user.login == 'snowmead') ||
      (github.event.action == 'opened' && contains(github.event.issue.body, '@cherry-pick-analyzer') && github.event.issue.user.login == 'snowmead')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      - name: Run Cherry Pick Analyzer
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting cherry pick analysis..."

          # Create the issue creation prompt file
          cat > cherry-pick-prompt.txt << 'CHERRYEOF'
          Create a GitHub issue for cherry pick management using the provided CSV data.

          **CSV DATA**: CSV_DATA_PLACEHOLDER
          **RELEASE VERSION**: RELEASE_VERSION_PLACEHOLDER
          **ISSUE TITLE**: ISSUE_TITLE_PLACEHOLDER
          **GITHUB REPOSITORY**: ${{ github.repository }}

          Task: Parse the CSV data and create a GitHub issue with organized subtasks.

          CSV Format: `Applied,Commit,Cherry pick,Status,Upstream PR,Note`

          Status meanings:
          - Permanent: Find and apply if needed
          - PR Upstream Merged: Skip - already in next version
          - Upstream PR not merged: Re-apply after checking PR status
          - Needs PR upstream: Manual process required
          - Temporary: Review for potential removal

          Use GitHub CLI to create an issue with this content structure and add labels: "cherry-pick", "fork-upgrade", "tracking"

          Issue template:
          ```markdown
          # Cherry Pick Management for RELEASE_VERSION_PLACEHOLDER

          ## Overview
          This issue tracks cherry pick management during fork upgrade to RELEASE_VERSION_PLACEHOLDER.

          | Metric | Value |
          |--------|-------|
          | Total Cherry Picks | [count from CSV] |
          | Permanent | [count] |
          | Upstream PR Merged | [count] - Skip |
          | Upstream PR Not Merged | [count] - Re-apply |
          | Needs PR Upstream | [count] - Manual |
          | Temporary | [count] - Review |
          | Analysis Date | [current date] |

          ## Status Handling Rules
          - **Permanent**: Find and apply if needed
          - **PR Upstream Merged**: Skip - already in next version
          - **Upstream PR Not Merged**: Re-apply after checking PR status
          - **Needs PR Upstream**: Manual process - submit to upstream
          - **Temporary**: Review for potential removal

          ## Action Items

          ### Permanent Cherry Picks
          [List each permanent cherry pick with checkbox, commit link, PR link, and note]

          ### Upstream PR Not Merged
          [List each with checkbox, commit link, PR link, and note]

          ### Needs PR Upstream
          [List each with checkbox, commit link, PR link, and note]

          ### Temporary Cherry Picks
          [List each with checkbox, commit link, PR link, and note]

          ### PR Upstream Merged (Skip)
          [List each as completed/crossed out]

          ## Notes
          [Include any special notes from CSV data]
          ```

          Create the issue now.
          CHERRYEOF

          # Replace placeholders with actual values using printf to handle special characters
          CSV_DATA=$(printf '%s\n' "${{ inputs.csv_data }}")
          RELEASE_VERSION="${{ inputs.release_version }}"
          ISSUE_TITLE="${{ inputs.issue_title }}"

          # Use a more robust method to replace placeholders
          cat > temp-replacements.txt << 'TEMPEOF'
          ${{ inputs.csv_data }}
          TEMPEOF

          # Replace CSV_DATA_PLACEHOLDER with file contents
          awk '
          BEGIN { RS="CSV_DATA_PLACEHOLDER"; ORS="" }
          NR==1 { print }
          NR==2 { 
            while ((getline line < "temp-replacements.txt") > 0) {
              print line "\n"
            }
            close("temp-replacements.txt")
            print
          }
          NR>2 { print RS $0 }
          ' cherry-pick-prompt.txt > cherry-pick-prompt-new.txt
          mv cherry-pick-prompt-new.txt cherry-pick-prompt.txt

          # Replace other placeholders safely
          sed -i.bak "s|RELEASE_VERSION_PLACEHOLDER|${RELEASE_VERSION}|g" cherry-pick-prompt.txt
          sed -i.bak "s|ISSUE_TITLE_PLACEHOLDER|${ISSUE_TITLE}|g" cherry-pick-prompt.txt
          rm -f cherry-pick-prompt.txt.bak temp-replacements.txt

          # Run the analyzer with timeout and error handling
          PROMPT_CONTENT=$(cat cherry-pick-prompt.txt)
          timeout 10m claude -p "${PROMPT_CONTENT}" --allowedTools "Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite" || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "Analysis timed out after 10 minutes"
              exit 1
            else
              echo "Analysis failed with exit code: $EXIT_CODE"
              exit $EXIT_CODE
            fi
          }

          echo "Cherry pick analysis completed successfully"

          # Clean up
          rm -f cherry-pick-prompt.txt
