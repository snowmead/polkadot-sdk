name: Cherry Pick Analyzer

on:
  workflow_dispatch:
    inputs:
      csv_data:
        description: "CSV formatted cherry pick data"
        required: true
        type: string
      release_version:
        description: "Release version (e.g., polkadot-stable2412)"
        required: true
        type: string
      issue_title:
        description: "Title for the GitHub issue"
        required: false
        default: "Cherry Pick Management"
        type: string
  issue_comment:
    types: [created]
  issues:
    types: [opened]

jobs:
  cherry-pick-analyzer:
    # Run if manually dispatched by @snowmead OR comment contains @cherry-pick-analyzer from @snowmead
    if: |
      (github.event_name == 'workflow_dispatch' && github.actor == 'snowmead') ||
      (github.event.comment.body && contains(github.event.comment.body, '@cherry-pick-analyzer') && github.event.comment.user.login == 'snowmead') ||
      (github.event.action == 'opened' && contains(github.event.issue.body, '@cherry-pick-analyzer') && github.event.issue.user.login == 'snowmead')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      - name: Run Cherry Pick Analyzer
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting cherry pick analysis..."

          # Create the issue creation prompt file
          cat > cherry-pick-prompt.txt << 'CHERRYEOF'
          You're a release engineer managing cherry picks for the Polkadot SDK fork upgrade. Create a technical tracking issue for cherry pick management.

          This repository requires precise tracking of cherry picks during version upgrades. The development team requires clear technical documentation and actionable tasks.

          Use this data for your analysis:<data>CSV_DATA_PLACEHOLDER</data>

          <instructions>
          1. Parse CSV with format: Applied,Commit,Cherry pick,Status,Upstream PR,Note
          2. Create issue with title: ISSUE_TITLE_PLACEHOLDER
          3. Add "fork-upgrade" label using GitHub CLI
          4. Group items by status with commit hashes visible
          5. Include concise metrics summary
          6. Format for developer readability with technical details
          </instructions>

          Use technical, concise language. Follow this structure:
          <formatting_example>
          # ISSUE_TITLE_PLACEHOLDER - RELEASE_VERSION_PLACEHOLDER

          ## Summary

          Fork upgrade to `RELEASE_VERSION_PLACEHOLDER` - cherry pick tracking.

          | Status | Count |
          |--------|------:|
          | Permanent | [count] |
          | PR Upstream Merged | [count] |
          | Upstream PR Not Merged | [count] |
          | Needs PR Upstream | [count] |
          | Temporary | [count] |
          | **Total** | **[total]** |

          Generated: [ISO-8601 timestamp]

          ## Status Definitions

          - **Permanent**: Apply during fork upgrade
          - **PR Upstream Merged**: Skip - already in next version
          - **Upstream PR Not Merged**: Re-apply after checking PR status
          - **Needs PR Upstream**: Submit to upstream first
          - **Temporary**: Review for potential removal

          ## Required Actions

          ### Permanent
          Apply during fork upgrade.
          - [ ] `[commit-hash-short]` - [description] ([upstream-pr-if-exists])
          
          ### Upstream PR Not Merged
          Check PR status before applying.
          - [ ] `[commit-hash-short]` - [description] ([upstream-pr-link])
          
          ### Needs PR Upstream
          Submit to upstream before next upgrade.
          - [ ] `[commit-hash-short]` - [description]
          
          ### Temporary
          Review for removal.
          - [ ] `[commit-hash-short]` - [description]
          
          ### Already Merged Upstream
          Skip - included in release.
          - `[commit-hash-short]` - ~~[description]~~ ([upstream-pr-link])

          ## Notes

          [Include any critical notes from CSV in a bullet list]
          - `[commit]`: [note]
          </formatting_example>

          Create the GitHub issue now with repository: ${{ github.repository }}
          CHERRYEOF

          # Replace placeholders with actual values using printf to handle special characters
          CSV_DATA=$(printf '%s\n' "${{ inputs.csv_data }}")
          RELEASE_VERSION="${{ inputs.release_version }}"
          ISSUE_TITLE="${{ inputs.issue_title }}"

          # Use a more robust method to replace placeholders
          cat > temp-replacements.txt << 'TEMPEOF'
          ${{ inputs.csv_data }}
          TEMPEOF

          # Replace CSV_DATA_PLACEHOLDER with file contents
          awk '
          BEGIN { RS="CSV_DATA_PLACEHOLDER"; ORS="" }
          NR==1 { print }
          NR==2 { 
            while ((getline line < "temp-replacements.txt") > 0) {
              print line "\n"
            }
            close("temp-replacements.txt")
            print
          }
          NR>2 { print RS $0 }
          ' cherry-pick-prompt.txt > cherry-pick-prompt-new.txt
          mv cherry-pick-prompt-new.txt cherry-pick-prompt.txt

          # Replace other placeholders safely
          sed -i.bak "s|RELEASE_VERSION_PLACEHOLDER|${RELEASE_VERSION}|g" cherry-pick-prompt.txt
          sed -i.bak "s|ISSUE_TITLE_PLACEHOLDER|${ISSUE_TITLE}|g" cherry-pick-prompt.txt
          rm -f cherry-pick-prompt.txt.bak temp-replacements.txt

          # Run the analyzer with timeout and error handling
          PROMPT_CONTENT=$(cat cherry-pick-prompt.txt)
          timeout 10m claude -p "${PROMPT_CONTENT}" --allowedTools "Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite" || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "Analysis timed out after 10 minutes"
              exit 1
            else
              echo "Analysis failed with exit code: $EXIT_CODE"
              exit $EXIT_CODE
            fi
          }

          echo "Cherry pick analysis completed successfully"

          # Clean up
          rm -f cherry-pick-prompt.txt
