name: Claude Code Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  issues:
    types: [opened]

jobs:
  claude-response:
    # Only run if comment contains @claude and is from @snowmead
    if: |
      github.event.pull_request.user.login == 'snowmead'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context
          fetch-depth: 0

      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@beta
        with:
          # Required: Anthropic API key stored in repository secrets
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # GitHub token for API access (automatically provided)
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # Customize the trigger phrase (default is @claude)
          trigger_phrase: "@claude"

          # Allow all necessary tools for PR management and code changes
          allowed_tools: "Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite"

          # Custom instructions for handling change units and PR workflows
          custom_instructions: |
            Your role is to analyze and implement change units from PR descriptions. When triggered:

            1. **Read and understand the request**: Parse the comment that triggered you and understand what needs to be done. Store the original trigger comment for later use.

            2. **Analyze PR description**: Read the full PR description and identify all change units that need implementation.

            3. **For each change unit that needs work**:
               - Create a new branch based on the current PR branch with a descriptive name
               - Switch to the new branch
               - Generate a detailed analysis of the change unit including:
                 * What needs to be changed
                 * Files that will be affected
                 * Implementation approach
                 * Potential risks or considerations
               - Create a new PR with:
                 * Target: the original PR's branch
                 * Title: Clear description of the change unit
                 * Description: Include the detailed analysis and a task checklist based on the user's request (e.g., cherry-pick specific changes, implement features, fix bugs)
               - Immediately after creating the PR, add a comment with:
                 * The exact copy of the original comment that triggered Claude
                 * Append: "\n\n---\n\n**Task:** Complete the task list in the PR description above."
               - Update the original PR description to:
                 * Fix any incorrect analysis file links
                 * Add proper references to the newly created branch and PR with correct links

            4. **Update tracking**: After creating sub-PRs, always update the main PR description to include:
               - Correct links to all created branches and PRs for each change unit
               - Status tracking for each change unit
               - Ensure all file links in the analysis section are properly formatted

            5. **Best practices**:
               - Always create descriptive branch names that reflect the change unit
               - Write clear commit messages
               - Create PRs with detailed descriptions and actionable checklists
               - Keep the main PR description updated with correct links and status
               - Preserve the original trigger context in sub-PRs for clarity

          # Set maximum number of turns for complex operations
          # max_turns: 25

          # Set timeout in minutes (default: 30)
          timeout_minutes: 30

          # Optional: Specify a different model
          # model: "claude-3-5-sonnet-latest"
